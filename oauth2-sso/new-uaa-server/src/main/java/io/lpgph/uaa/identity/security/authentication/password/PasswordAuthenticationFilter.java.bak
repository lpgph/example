package io.lpgph.auth.oauth2.authentication.password;

import io.lpgph.auth.oauth2.handler.DefaultAuthenticationSuccessHandler;
import lombok.extern.slf4j.Slf4j;
import org.springframework.lang.Nullable;
import org.springframework.security.authentication.AuthenticationServiceException;
import org.springframework.security.authentication.UsernamePasswordAuthenticationToken;
import org.springframework.security.core.Authentication;
import org.springframework.security.core.AuthenticationException;
import org.springframework.security.oauth2.common.OAuth2AccessToken;
import org.springframework.security.oauth2.provider.*;
import org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter;
import org.springframework.security.web.util.matcher.AntPathRequestMatcher;
import org.springframework.util.Assert;

import javax.servlet.FilterChain;
import javax.servlet.ServletException;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;
import java.io.IOException;
import java.util.HashMap;

/**
 * @see org.springframework.security.web.context.HttpSessionSecurityContextRepository
 * @see org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter
 */
@Slf4j
public class PasswordAuthenticationFilter extends AbstractAuthenticationProcessingFilter {

  private final ClientDetailsService clientDetailsService;

  public static final String SPRING_SECURITY_FORM_USERNAME_KEY = "username";
  public static final String SPRING_SECURITY_FORM_PASSWORD_KEY = "password";
  public static final String SPRING_SECURITY_FORM_CLIENT_KEY = "client_id";

  private String usernameParameter = SPRING_SECURITY_FORM_USERNAME_KEY;
  private String passwordParameter = SPRING_SECURITY_FORM_PASSWORD_KEY;
  private String clientIdParameter = SPRING_SECURITY_FORM_CLIENT_KEY;
  private boolean postOnly = true;

  public PasswordAuthenticationFilter(ClientDetailsService clientDetailsService) {
    super(new AntPathRequestMatcher("/login/t1", "POST"));
    this.clientDetailsService = clientDetailsService;
  }

  public Authentication attemptAuthentication(
      HttpServletRequest request, HttpServletResponse response) throws AuthenticationException {
    if (postOnly && !request.getMethod().equals("POST")) {
      throw new AuthenticationServiceException(
          "Authentication method not supported: " + request.getMethod());
    }

    String username = obtainUsername(request);
    String password = obtainPassword(request);
    String clientId = obtainClientId(request);

    if (username == null) {
      username = "";
    }

    if (password == null) {
      password = "";
    }

    username = username.trim();

    // 如果没有客户端ID 则设置默认的客户端id
    if (clientId == null) {
      clientId = "app";
    }

    UsernamePasswordAuthenticationToken authRequest =
        new UsernamePasswordAuthenticationToken(username, password);
    setDetails(request, authRequest);

    log.info("\n\n 认证前 Authentication\n{}\n\n ", authRequest);
    return this.getAuthenticationManager().authenticate(authRequest);
    //  调用  AuthenticationManager -> ProviderManager -> DaoAuthenticationProvider进行认证
    //    Authentication authentication = this.getAuthenticationManager().authenticate(authRequest);
    //    log.info("\n\n 认证后 Authentication\n{}\n\n ", authentication);
    //    ClientDetails clientDetails = clientDetailsService.loadClientByClientId(clientId);
    //    TokenRequest tokenRequest =
    //        new TokenRequest(new HashMap<>(), clientId, clientDetails.getScope(), "password");
    //    OAuth2Request oAuth2Request = tokenRequest.createOAuth2Request(clientDetails);
    //    return new OAuth2Authentication(oAuth2Request, authentication);
  }

  @Nullable
  protected String obtainPassword(HttpServletRequest request) {
    return request.getParameter(passwordParameter);
  }

  @Nullable
  protected String obtainClientId(HttpServletRequest request) {
    return request.getParameter(clientIdParameter);
  }

  @Nullable
  protected String obtainUsername(HttpServletRequest request) {
    return request.getParameter(usernameParameter);
  }

  protected void setDetails(
      HttpServletRequest request, UsernamePasswordAuthenticationToken authRequest) {
    authRequest.setDetails(authenticationDetailsSource.buildDetails(request));
  }

  public void setUsernameParameter(String usernameParameter) {
    Assert.hasText(usernameParameter, "Username parameter must not be empty or null");
    this.usernameParameter = usernameParameter;
  }

  public void setPasswordParameter(String passwordParameter) {
    Assert.hasText(passwordParameter, "Password parameter must not be empty or null");
    this.passwordParameter = passwordParameter;
  }

  public void setClientIdParameter(String clientIdParameter) {
    Assert.hasText(clientIdParameter, "clientId parameter must not be empty or null");
    this.clientIdParameter = clientIdParameter;
  }

  public void setPostOnly(boolean postOnly) {
    this.postOnly = postOnly;
  }

  public final String getUsernameParameter() {
    return usernameParameter;
  }

  public final String getPasswordParameter() {
    return passwordParameter;
  }
}
