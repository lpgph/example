server:
  port: 8082
  tomcat:
    uri-encoding: UTF-8
  #  ssl:
  #    key-store: classpath:test.p12
  #    key-store-password: testpass
  #    keyStoreType: PKCS12
  #    keyAlias: test
  servlet:
    session:
      cookie:
        name: g1

spring:
  application:
    name: new-gateway
  output:
    ansi:
      enabled: ALWAYS #控制台彩色输出

  # 加上此配置可自动配置安全验证及JWT验证
  redis:
    port: 6379
    host: 127.0.0.1
    # Redis服务器连接密码（默认为空）
    #    database:
    password: root

  cloud:
    nacos:
      discovery:
        server-addr: 127.0.0.1:8848
    loadbalancer:
      ribbon:
        enabled: false
    gateway:
      globalcors:
        corsConfigurations:
          '[/**]':
            allowedHeaders: "*" # 允许访问的头信息,*表示全部
            maxAge: 1800  # 预检请求的缓存时间（秒），即在这个时间段里，对于相同的跨域请求不会再预检了
            #            allowedOrigins: "*" # 允许向该服务器提交请求的URI，*表示全部允许。。这里尽量限制来源域，比如http://xxxx:8080 ,以降低安全风险
            allowedOriginPattern: "*" # 替代 allowedOrigins
            allowCredentials: true  # 允许cookies跨域
            allowedMethods: "*"
      discovery:
        locator:
          enabled: true
          lower-case-service-id: true
      defaultFilters:
        #        - PreserveHostHeader # 将原始的http头部带上
        - TokenRelay # 验证和刷新令牌
        - RemoveRequestHeader=Cookie  # 清除Cookie 资源服务器不需要cookie 只需要token
      routes:
        - id: product
          uri: lb://product
          predicates:
            #            - Method=POST, PUT, PATCH, DELETE,GET
            - Path=/product/**
          filters:
            - StripPrefix=1
        - id: goods
          uri: lb://goods
          predicates:
            - Path=/goods/**
          filters:
            - StripPrefix=1
        - id: order
          uri: lb://order
          predicates:
            - Path=/order/**
          filters:
            - StripPrefix=1
        - id: uaa
          uri: http://localhost:8090
          predicates:
            - Path=/uaa/**
          filters:
            - StripPrefix=1
  #        - id: uaa
  #          uri: lb://uaa
  #          predicates:
  #            - Path=/login/**
  #          filters:
  #            - RemoveRequestHeader=device_type
  security:
    oauth2:
      client:
        registration:
          cms:
            provider: uaa
            client-id: client1
            client-secret: client1
            client-name: "授权"
            authorization-grant-type: authorization_code
            redirect-uri: "{baseUrl}/login/oauth2/code/{registrationId}"
            scope: all
          app:
            provider: uaa
            client-id: app
            client-secret: app
            client-name: "账户密码授权"
            authorization-grant-type: password
            redirect-uri: "{baseUrl}/login/oauth2/code/{registrationId}"
            scope: all
        provider:
          uaa:
            authorization-uri: http://localhost:8090/oauth/authorize
            token-uri: http://localhost:8090/oauth/token
            user-info-uri: http://localhost:8071/userinfo
            user-name-attribute: sub
            jwk-set-uri: http://localhost:8090/oauth/token_key
#            user-info-authentication-method: header


logging:
  level:
    org:
      springframework: INFO
    com:
      alibaba:
        nacos: ERROR


