package io.lpgph.uaa.security.config;

import org.springframework.context.annotation.Configuration;
import org.springframework.core.annotation.Order;
import org.springframework.core.convert.converter.Converter;
import org.springframework.security.authentication.AbstractAuthenticationToken;
import org.springframework.security.config.annotation.web.builders.HttpSecurity;
import org.springframework.security.config.annotation.web.configuration.WebSecurityConfigurerAdapter;
import org.springframework.security.config.annotation.web.configurers.AbstractHttpConfigurer;
import org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer;
import org.springframework.security.config.http.SessionCreationPolicy;
import org.springframework.security.oauth2.jwt.Jwt;
import org.springframework.security.oauth2.server.resource.authentication.JwtAuthenticationConverter;
import org.springframework.security.oauth2.server.resource.authentication.ReactiveJwtAuthenticationConverterAdapter;

import java.util.HashMap;
import java.util.Map;

import static org.springframework.security.config.Customizer.withDefaults;

/**
 * 如果将 用户资源服务和认证授权服务拆分 则认证授权服务配置Client数据库 使用客户端认证的方式向用户资源服务认证<br>
 * 认证服务认证成功后会生成session 授权则是通过session向客户端进行授权的 会导致该认证服务上的资源可以通过SESSION来进行访问 所以解决方案两种 <br>
 * 1. 是在认证阶段就通过调用授权服务生成token返回 不再生成session 但并不符合流程 <br>
 * 2. 将用户客户端以及权限管理作为资源拆分成资源服务 认证服务同时作为客户端服务 通过客户端认证的方式向用户资源服务请求用户信息 br>
 */
@Order(10) // 资源服务比认证服务配置优先
@Configuration
public class ResourceSecurityConfig extends WebSecurityConfigurerAdapter {

  @Override
  protected void configure(HttpSecurity http) throws Exception {
    // oauth 和 login 直接放过 其他服务属于认证之后即可请求(不需要进行oauth2授权)
    http.requestMatchers(matcher -> matcher.antMatchers("/userinfo", "/auth/**"))
        .authorizeRequests(request -> request.anyRequest().authenticated())
        .oauth2ResourceServer(OAuth2ResourceServerConfigurer::jwt)
        .cors(withDefaults());
  }
}
