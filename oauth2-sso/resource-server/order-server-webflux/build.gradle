plugins {
    id "java"
    id "idea"
    id "eclipse"
    id 'maven-publish'
    id 'org.springframework.boot' version '2.4.4'
    id 'io.spring.dependency-management' version '1.0.11.RELEASE'
    id 'com.bmuschko.docker-spring-boot-application' version '6.6.1'
}
description = "资源服务-商品 完全使用webflux"

group = "io.lpgph"
version = "0.0.1-SNAPSHOT"
sourceCompatibility = JavaVersion.VERSION_11
targetCompatibility = JavaVersion.VERSION_11

sourceSets {
    main {
        java {
            srcDir("src/main/java") // 指定源码目录
        }
        resources {
            srcDirs = ["src/main/resources", "src/main/java"] //指定资源目录
            includes = ["**/*"]
            excludes = ["**/*.java,**/*.kt"]
        }
    }
    test {
        java {
            srcDir("src/test/java") // 指定源码目录
        }
        resources {
            srcDirs = ["src/test/resources", "src/test/java"] //指定资源目录
            includes = ["**/*"]
            excludes = ["**/*.java,**/*.kt"]
        }
    }
}

//定义jar包版本号
ext {
    set('springCloudVersion', "2020.0.2")
    set("jacksonVersion", "2.10.3")
    set('springCloudAlibabaVersion', "2.2.3.RELEASE")
    set("feignReactorVersion", "2.0.25")

    compileJava.options.encoding = "UTF-8"
    compileTestJava.options.encoding = "UTF-8"
    javadoc.options.encoding = "UTF-8"
}


configurations {
    // spring热部署
    developmentOnly
    runtimeClasspath {
        extendsFrom developmentOnly
    }
    compileOnly {
        extendsFrom annotationProcessor
    }
}

dependencies {
    implementation("org.springframework.boot:spring-boot-starter-webflux")

//    implementation("org.springframework.boot:spring-boot-starter-websocket")
    //##############################   spring cloud   ##############################
    // bootstrap.xml  或者 spring.cloud.bootstrap.enabled=true
    implementation("org.springframework.cloud:spring-cloud-starter-bootstrap")

    implementation("org.springframework.cloud:spring-cloud-starter-openfeign")
    // openfeign依赖
//    implementation("org.springframework.cloud:spring-cloud-starter-netflix-ribbon")
    implementation("org.springframework.cloud:spring-cloud-starter-loadbalancer")

    // feign 支持webflux 替换 openfeign loadbalancer
//    implementation ('com.playtika.reactivefeign:feign-reactor-webclient:${feignReactorVersion}')
//    implementation ('com.playtika.reactivefeign:feign-reactor-cloud:${feignReactorVersion}')
//    implementation ("com.playtika.reactivefeign:feign-reactor-spring-configuration:${feignReactorVersion}")

    implementation 'org.springframework.boot:spring-boot-starter-oauth2-resource-server'
    implementation('org.springframework.boot:spring-boot-starter-oauth2-client')

    implementation 'com.alibaba.cloud:spring-cloud-starter-alibaba-nacos-config'
    implementation 'com.alibaba.cloud:spring-cloud-starter-alibaba-nacos-discovery'

    // 支持jdk8+
    implementation("com.fasterxml.jackson.module:jackson-module-parameter-names:${jacksonVersion}")
    implementation("com.fasterxml.jackson.datatype:jackson-datatype-jdk8:${jacksonVersion}")
    implementation("com.fasterxml.jackson.datatype:jackson-datatype-jsr310:${jacksonVersion}")

    implementation 'org.springframework.boot:spring-boot-starter-amqp'
    implementation 'org.springframework.cloud:spring-cloud-starter-task'

    //##############################   spring boot   ##############################
    //监控
    implementation 'com.google.guava:guava:29.0-jre'

    compileOnly("org.projectlombok:lombok")
    annotationProcessor("org.projectlombok:lombok")
    testAnnotationProcessor("org.projectlombok:lombok")
    testCompileOnly("org.projectlombok:lombok")

    developmentOnly 'org.springframework.boot:spring-boot-devtools'
    annotationProcessor 'org.springframework.boot:spring-boot-configuration-processor'

    testImplementation('org.springframework.boot:spring-boot-starter-test')
    testImplementation 'io.projectreactor:reactor-test'
    testImplementation 'org.springframework.amqp:spring-rabbit-test'
}
dependencyManagement {
    imports {
        mavenBom "org.springframework.cloud:spring-cloud-dependencies:${springCloudVersion}"
        mavenBom "com.alibaba.cloud:spring-cloud-alibaba-dependencies:${springCloudAlibabaVersion}"
//        mavenBom "de.codecentric:spring-boot-admin-dependencies:${springBootAdminVersion}"
    }
}
configurations.all {
    resolutionStrategy.dependencySubstitution.all { dependency ->
        if (dependency.requested instanceof ModuleComponentSelector && dependency.requested.module == 'spring-boot-starter-logging') {
            dependency.useTarget("org.springframework.boot:spring-boot-starter-log4j2:$dependency.requested.version", 'Use Log4j2 instead of Logback')
        }
    }
}

test {
    useJUnitPlatform()
}

//docker {
//    springBootApplication {
//        baseImage = 'openjdk:8-alpine'
//        ports = [9090, 8080]
//        images = ['order:' + project.version, 'order:latest']
//        jvmArgs = ['-Dspring.profiles.active=production', '-Xmx2048m']
//    }
//}


repositories {
    mavenLocal()
}
